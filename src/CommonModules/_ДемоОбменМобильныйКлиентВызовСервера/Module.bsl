#Область ПрограммныйИнтерфейс

// Функция запускает синхронизацию основного и автономного серверов
// Параметры:
//  КодУзла - Строка -
//  НаименованиеМобильногоКомпьютера - Строка -
//  НомерОтправленного - Число -
//  НомерПринятого - Число -
//
// Возвращаемое значение:
//  Строка - код узла синхронизации
//
Функция НачатьСинхронизацию(КодУзла, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.ПланыОбмена._ДемоМобильныйКлиент) Тогда
		ВызватьИсключение(НСтр("ru='Недостаточно прав на синхронизацию данных с мобильным приложением.'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена._ДемоМобильныйКлиент.ЭтотУзел().ПолучитьОбъект();
	Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
		
		УзелОбмена.Код = "001";
		УзелОбмена.Наименование = НСтр("ru = 'Центральный'");
		УзелОбмена.Записать();
		
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена._ДемоМобильныйКлиент.НайтиПоКоду(КодУзла); 
	Если УзелОбмена.Пустая() Тогда
		
		НовыйУзел = ПланыОбмена._ДемоМобильныйКлиент.СоздатьУзел();
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Константа._ДемоКодНовогоУзлаПланаОбмена");
			Блокировка.Заблокировать();
			
			КодНовогоУзла = Константы._ДемоКодНовогоУзлаПланаОбмена.Получить();
			Если КодНовогоУзла = 0 Тогда 
				КодНовогоУзла = 2;
			КонецЕсли;	
			Константы._ДемоКодНовогоУзлаПланаОбмена.Установить(КодНовогоУзла + 1);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение НСтр("ru='Не удалось записать константу ""Демо: Код нового узла плана обмена"". 
				|Попробуйте повторить чуть позже или обратитесь к системному администратору.'");
		
		КонецПопытки;
		
		Если СтрДлина(КодНовогоУзла) < 3 Тогда
			НовыйУзел.Код = Формат(КодНовогоУзла, "ЧЦ=3; ЧВН=");
		Иначе
			НовыйУзел.Код = КодНовогоУзла;
		КонецЕсли;
		НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
		НовыйУзел.НомерОтправленного = НомерОтправленного;
		НовыйУзел.НомерПринятого = НомерПринятого;
		НовыйУзел.Записать();
		_ДемоОбменМобильныйКлиент.ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
		УзелОбмена = НовыйУзел.Ссылка;
		
	Иначе
		
		СведенияОбУзлеОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелОбмена, 
			"Наименование,ПометкаУдаления,НомерОтправленного,НомерПринятого");
		Если СведенияОбУзлеОбмена.ПометкаУдаления 
			Или СведенияОбУзлеОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.ПометкаУдаления = Ложь;
			Узел.Наименование = НаименованиеМобильногоКомпьютера;
			Узел.Записать();
			
		КонецЕсли;
		
		Если СведенияОбУзлеОбмена.НомерОтправленного <> НомерОтправленного 
			Или СведенияОбУзлеОбмена.НомерПринятого <> НомерПринятого Тогда
			
			Узел = УзелОбмена.ПолучитьОбъект();
			Узел.НомерОтправленного = НомерОтправленного;
			Узел.НомерПринятого = НомерПринятого;
			Узел.Записать();
			_ДемоОбменМобильныйКлиент.ЗарегистрироватьИзмененияДанных(УзелОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код");
	
КонецФункции

// Операция обмена данными
// получает пакет изменений предназначенных для данного узла
// записывает пакет изменений принятых от данного узла
//
// Параметры:
//  КодУзла - Строка - код узла, с которым идет обмен
//  ДанныеМобильногоПриложения - ХранилищеЗначения - хранилище в которое помещен пакет обмена
//
// Возвращаемое значение:
//  ХранилищеЗначения
//
Функция ВыполнитьОбменДанными(КодУзла, ДанныеМобильногоПриложения) Экспорт
	
	УзелОбмена = ПланыОбмена._ДемоМобильныйКлиент.НайтиПоКоду(КодУзла); 
	
	Если УзелОбмена.Пустая() Тогда
		ТекстОшибки = НСтр(
			"ru='Невозможно выполнить синхронизацию данных с мобильным устройством, т.к. соответствующий ему узел с кодом %1 не существует.'");
		ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КодУзла));
	КонецЕсли;
	
	_ДемоОбменМобильныйКлиент.ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
	Возврат _ДемоОбменМобильныйКлиент.СформироватьПакетОбмена(УзелОбмена);
	
КонецФункции

// Функция проверяет наличие прав на запуск синхронизации основного и автономного серверов
//
// Возвращаемое значение:
//  Булево - Истина, если есть права на запуск синхронизации
//
Функция ТребуетсяОбменДаннымиСАвтономнымПриложением() Экспорт

	// АПК:336-выкл Не заменять на РолиДоступны. Проверка ролей осуществляется в режиме автономной конфигурации
	//@skip-check using-isinrole
	Возврат РольДоступна("_ДемоОбменМобильныйКлиент");
	// АПК:336-вкл
	
КонецФункции

#КонецОбласти